---   
  - name: Check if id already exists
    win_shell: |
         $outstring=Get-LocalUser -Name '{{ list_item.Userid }}' -erroraction 'silentlycontinue'|Measure-Object -Line |ft -h|out-String 
         Write $outstring.trim()
    register: shelloutput
    ignore_errors: true
  - debug:
       msg: "Fetch details command {{ shelloutput }} "
  - debug:
       msg: "Shelloutput stdout {{ shelloutput.stdout_lines[0] }}"
  - set_fact:
        var_useridexists: "{{ (shelloutput.stdout_lines[0] == '1')|ternary(true,false) }}"
  - debug:
       msg: "user id exists: {{ var_useridexists }}"
    when:
       - shelloutput.stdout is defined and shelloutput.stdout !=""
  - name: Split groups in list
    set_fact:
         grouplist: "{{ list_item.Groups.split('|') }}"
    when:
            -   list_item.Groups|length > 0

  - name: Modify a user
    win_user:
      name: "{{ list_item.Userid  }}"
      fullname: "{{ list_item.Fullname|default(omit,true) }}"
      password: "{{ list_item.Password|default(omit,true) }}"
      groups: "{{ grouplist) }}"
      password_expired: "{{ list_item.Changepasswordatlogin|default('True') }}"
      description:  "{{ list_item.Description|default(omit,true) }}"
      password_never_expires : "{{ list_item.PasswordNeverExpires|default(omit,true) }}"
      user_cannot_change_password : "{{ list_item.UserCannotChangePassword|default(omit,true) }}"
      account_disabled : "{{ list_item.AccountDisabled|default(omit,true) }}"
      groups_action: remove
      update_password: always
      state: present
    ignore_errors: true
    register: userresult
    when:
      - var_useridexists
  - debug:
       msg: "User Modification: {{ userresult }}"
  - name: Check all the fields created with the user
    win_shell: Get-LocalUser -Name '{{ list_item.Userid }}' 
    register: getuserdetails
    ignore_errors: true
  - debug:
      msg: "User details after the addition or modifications {{ getuserdetails.stdout }}"

  - set_fact:
      var_output_txt: "{{ var_output_txt+ list_item[keysitem]+', ' }}"
    loop: "{{ var_csv_fields.split(',') }}"   
    loop_control:
      loop_var: keysitem
  - debug:
      msg: " new output:{{ var_output_txt }}"      

  - set_fact:
       var_output_txt: "{{ var_output_txt +', '+ 'New User created successfully.Msg:' +userresult.msg|default('')+ '\n' }}"
    when:
       - not var_useridexists and  userresult.changed

  - set_fact:
       var_output_txt: "{{ var_output_txt+', '+ 'User not created Error:' + userresult.msg|default('') +'\n' }}"
    when:
       - not var_useridexists  and not userresult.changed

  - set_fact:
         var_output_txt: "{{ var_output_txt +', '+ 'User created but errors -- ' +  userresult.stderr|default('')  + '\n' }}"
    when:
         - not var_useridexists and userresult.stderr is defined and userresult.stderr|length > 0  and userresult.changed == true
  - set_fact:
       var_output_txt: "{{ var_output_txt +', '+ 'User exists and group removed' + '\n' }}"
    when:
       - var_useridexists and  userresult.changed
  - set_fact:
       var_output_txt: "{{ var_output_txt +', '+ 'User not Modified. Error:' + userresult.msg|default('') +'\n' }}"
    when:
       - var_useridexists  and not userresult.changed
